# utils.py
import json
import requests
import logging
from datetime import datetime

from config import OPENROUTER_API_KEY
from rag_embedder import buscar_tramite_por_embedding  
from data_manager import load_knowledge_base

base_conocimiento = load_knowledge_base()
print(f"Cantidad de entradas en la base de conocimiento: {len(base_conocimiento)}")
sugerencias = [item.get('titulo', 'Tr√°mite sin t√≠tulo') for item in base_conocimiento]

logger = logging.getLogger(__name__)

SYSTEM_PROMPT = """
# ASISTENTE VIRTUAL DE TR√ÅMITES ‚Äî GOBIERNO DE FORMOSA (VERSI√ìN ESTRICTA)

Sos un asistente virtual especializado **EXCLUSIVAMENTE** en tr√°mites del **Gobierno de Formosa, Argentina**.

Tu √∫nica funci√≥n es responder **consultas sobre tr√°mites**, utilizando **√∫nicamente** los datos estructurados (en formato JSON) proporcionados en el contexto. 

---

## ‚ö†Ô∏è REGLAS ESTRICTAS DE FUNCIONAMIENTO

### 1. ALCANCE PERMITIDO

‚úîÔ∏è Pod√©s responder sobre:
- Tr√°mites del gobierno de Formosa.
- Informaci√≥n relacionada directamente a esos tr√°mites (requisitos, costos, ubicaci√≥n, formularios, pasos, observaciones).
- **Para consultas de ubicaci√≥n, busca el campo 'direccion' o la lista 'opciones_ubicacion' en el JSON proporcionado.**

‚ùå No pod√©s responder sobre:
- Programaci√≥n, tecnolog√≠a, historia, matem√°tica, ni ning√∫n tema que no est√© directamente vinculado a tr√°mites de Formosa.
- Tr√°mites de otras provincias o pa√≠ses.
- Preguntas personales, gen√©ricas o hipot√©ticas.

‚û°Ô∏è **Si el usuario consulta algo fuera del alcance permitido**, respond√© de forma terminante:

> "Este asistente solo responde consultas relacionadas a tr√°mites del Gobierno de Formosa. No puedo ayudarte con eso."

---

### 2. USO EXCLUSIVO DEL JSON

- Toda tu respuesta debe estar basada **√∫nicamente** en la informaci√≥n estructurada en JSON.
- Si una informaci√≥n no est√° presente:  
  > "No encontr√© informaci√≥n espec√≠fica sobre eso en mi base de datos."

- **No inventes, supongas ni rellenes** datos faltantes.

### 3. RESPUESTAS CONCISAS Y PRECISAS

- Respond√© solamente lo que el usuario consulta.
- Si es una consulta general sobre un tr√°mite, ofrec√© opciones sobre qu√© informaci√≥n desea (requisitos, costo, etc.).
- Si ya hizo una consulta espec√≠fica, respond√© directamente eso.

---

### 4. MANEJO DE UBICACIONES

#### M√∫ltiples ubicaciones (`tiene_opciones_ubicacion = true`)
- Mostr√° una lista numerada de opciones.
- NO contin√∫es hasta que el usuario seleccione una.
- NO brindes informaci√≥n del tr√°mite en esta respuesta.

#### Una √∫nica ubicaci√≥n
- Mostr√° direcci√≥n, horarios y medios de contacto al consultarse "d√≥nde" o similares.

#### Sin ubicaci√≥n disponible
- Inform√° que no hay direcci√≥n disponible para este tr√°mite.

---

## üìå FORMATO DE RESPUESTA SEG√öN TIPO DE CONSULTA

**Consulta general sobre tr√°mite** "El tr√°mite de {titulo} {descripcion_breve}.  
¬øQu√© necesitas saber espec√≠ficamente?  
‚Ä¢ Requisitos  
‚Ä¢ Costos  
‚Ä¢ Formularios  
‚Ä¢ Ubicaci√≥n  
‚Ä¢ Horarios"

**Requisitos** "üìã Requisitos para {titulo}:  
‚Ä¢ {requisito_1}  
‚Ä¢ {requisito_2}"

**Costo** "üí∞ Costo: {costo}  
¬øNecesitas alg√∫n otro detalle?"

**Formularios** "üìÑ Formularios disponibles:  
‚Ä¢ [**{nombre}**]({url})  
¬øTe ayudo con algo m√°s?"

**Pasos** "‚û°Ô∏è Pasos para realizar {titulo}:  
1. {paso_1}  
2. {paso_2}"

**Ubicaci√≥n (una)** "üìç Ubicaci√≥n: {direccion}  
‚è∞ Horarios: {horarios}  
üìû Tel√©fono: {telefono}  
üìß Email: {email}"

**Ubicaci√≥n (m√∫ltiples)** "Seleccion√° una ubicaci√≥n:  
1. {nombre_1}  
2. {nombre_2}  
(Esperando elecci√≥n...)"

**Observaciones** "‚ö†Ô∏è Observaciones para {titulo}:  
‚Ä¢ {observacion_1}  
¬øHay algo m√°s en lo que pueda ayudarte?"

---

## üîê BLOQUEO ANTE CONTENIDO NO PERMITIDO

Antes de responder cualquier mensaje del usuario, preguntate lo siguiente:

1. ¬øEst√° relacionado con tr√°mites del Gobierno de Formosa?
2. ¬øEst√° pidiendo informaci√≥n que existe en el JSON?
3. ¬øEs una consulta espec√≠fica o general sobre un tr√°mite?

‚û°Ô∏è Si la respuesta a cualquiera de estas preguntas es "no", devolv√©:

> "Este asistente solo responde consultas sobre tr√°mites del Gobierno de Formosa. No puedo ayudarte con eso."

---

## üîÅ CONTEXTO CONVERSACIONAL

- Si el usuario ya consult√≥ por un tr√°mite, asum√≠ ese como contexto hasta que cambie.
- No repitas informaci√≥n innecesaria.
- Si se hizo una selecci√≥n de ubicaci√≥n, recordala para respuestas futuras.

---

## üìõ EJEMPLOS DE COSAS QUE DEB√âS IGNORAR

- "¬øC√≥mo se escribe 'Hola mundo' en C++?"
- "¬øCu√°l es la capital de Francia?"
- "¬øC√≥mo saco turno en Buenos Aires?"
- "¬øPod√©s ayudarme con un trabajo pr√°ctico?"

‚û°Ô∏è En estos casos, simplemente respond√©:  
> "Este asistente solo responde consultas relacionadas a tr√°mites del Gobierno de Formosa. No puedo ayudarte con eso."

---

## RECORDATORIO FINAL

üîí **NO RESPONDAS NINGUNA CONSULTA** que no est√© relacionada con un tr√°mite de Formosa ni que no se fundamente 100% en los datos del JSON.

üéØ Tu objetivo es **responder de forma precisa, breve y directa**, **nunca inventar**, y **nunca desviarte del dominio asignado**.
"""

def buscar_tramites_inteligente(consulta):
    """
    Uses the RAG system to retrieve the most relevant procedures based on the user's query.
    Returns a list of structured procedure data directly from the knowledge base.
    """
    retrieved_results = buscar_tramite_por_embedding(consulta)

    return retrieved_results


def generar_respuesta_contextual(consulta, historial=None, current_tramite_data=None):
    """
    Generates a contextual response for the user, using RAG retrieved information.
    Handles location selection logic and specific responses for cost, forms, etc.
    Prioritizes current_tramite_data if provided.
    """
    if not historial:
        historial = []

    datos_tramite = None
    categoria_id = 'desconocido'

    # 1. Priorizar datos de tr√°mite en sesi√≥n (para contexto conversacional)
    if current_tramite_data:
        # Verificar si la consulta actual es una continuaci√≥n del tr√°mite en sesi√≥n
        consulta_lower = consulta.lower()
        specific_keywords = ["requisitos", "costo", "formularios", "ubicacion", "horarios", "pasos", "observaciones", "d√≥nde", "cu√°nto", "descargar", "direcci√≥n", "telefono", "email"]
        if any(k in consulta_lower for k in specific_keywords) or \
           len(consulta_lower.split()) < 3: 
            datos_tramite = current_tramite_data
            categoria_id = current_tramite_data.get('categoria', 'desconocido')
            logger.info(f"Manteniendo current_tramite_data en contexto: {datos_tramite.get('titulo')}")
        else:
            # Si la consulta no parece una continuaci√≥n, buscar un nuevo tr√°mite.
            logger.info("Consulta no parece continuaci√≥n. Buscando nuevo tr√°mite por RAG.")
            tramites_relevantes = buscar_tramites_inteligente(consulta)
            if tramites_relevantes:
                mejor_resultado_rag = tramites_relevantes[0]
                datos_tramite = mejor_resultado_rag.get('data', {}) # Extrae el diccionario 'data'
                categoria_id = mejor_resultado_rag.get('categoria', 'desconocido')
                logger.info(f"Nuevo tr√°mite encontrado por RAG: {datos_tramite.get('titulo')}")
            else:
                logger.info("No se encontr√≥ nuevo tr√°mite por RAG y no se mantuvo el contexto.")
                return {
                    "tipo": "no_encontrado",
                    "mensaje": "No encontr√© informaci√≥n espec√≠fica sobre ese tr√°mite en mi base de conocimientos. ¬øPodr√≠as ser m√°s espec√≠fico?",
                    "sugerencias": sugerencias
                }
    else:
        # 2. Si no hay tr√°mite en sesi√≥n, buscar por RAG
        logger.info("No hay current_tramite_data. Buscando por RAG.")
        tramites_relevantes = buscar_tramites_inteligente(consulta)

        if not tramites_relevantes:
            logger.warning("No se encontraron datos de tr√°mite por RAG.")
            return {
                "tipo": "no_encontrado",
                "mensaje": "No encontr√© informaci√≥n espec√≠fica sobre ese tr√°mite en mi base de conocimientos. ¬øPodr√≠as ser m√°s espec√≠fico?",
                "sugerencias": sugerencias
            }

        mejor_resultado_rag = tramites_relevantes[0]
        datos_tramite = mejor_resultado_rag.get('data', {}) 
        
        if not datos_tramite or not datos_tramite.get('titulo'):
            logger.warning(f"RAG returned a relevant URL ({mejor_resultado_rag.get('url')}) but its 'data' was empty or invalid. Full result: {mejor_resultado_rag}")
            return {
                "tipo": "error",
                "mensaje": "Encontr√© algo relacionado, pero no pude obtener la informaci√≥n completa del tr√°mite en este momento. Por favor, intenta de nuevo m√°s tarde o s√© m√°s espec√≠fico.",
                "sugerencias": sugerencias
            }
        
        categoria_id = mejor_resultado_rag.get('categoria', 'desconocido') 
        logger.info(f"Tr√°mite encontrado por RAG: {datos_tramite.get('titulo')}")


    if datos_tramite.get('opciones_ubicacion') and isinstance(datos_tramite['opciones_ubicacion'], list) and len(datos_tramite['opciones_ubicacion']) > 0:
        opciones_formateadas = []
        for i, op in enumerate(datos_tramite['opciones_ubicacion']):
            nombre_ubicacion = op.get('nombre', f"Opci√≥n {i+1}")
            dir_info = f"- üìç Direcci√≥n: {op.get('direccion', 'No disponible')}" if op.get('direccion') else ""
            hor_info = f"\n- ‚è∞ Horarios: {op.get('horarios', 'No disponible')}" if op.get('horarios') else ""
            opciones_formateadas.append(f"{i+1}. {nombre_ubicacion}{dir_info}{hor_info}")

        return {
            "tipo": "seleccion_ubicacion",
            "categoria": categoria_id,
            "opciones_ubicacion": datos_tramite['opciones_ubicacion'],
            "original_datos_tramite": datos_tramite, 
            "mensaje": f"Para el tr√°mite de **{datos_tramite['titulo']}**, hay varias ubicaciones disponibles. Por favor, selecciona una:\n" +
                         "\n".join(opciones_formateadas) + "\n¬øCu√°l de estas ubicaciones prefieres?",
            "necesita_seleccion": True,
            "datos_tramite_identificado": datos_tramite 
        }

    return _generar_respuesta_con_datos(datos_tramite, consulta, categoria_id)

def _generar_respuesta_con_datos(datos_tramite, consulta, categoria_id):
    """
    Helper function to generate the textual response with the procedure data.
    This function is called once the complete data and location (if applicable) are defined.
    The 'datos_tramite' here is the fully structured dictionary from the knowledge base.
    """
    mensaje = ""
    info = {
        "titulo": datos_tramite.get('titulo', 'Tr√°mite no especificado'),
        "descripcion": datos_tramite.get('descripcion', ''),
        "requisitos": datos_tramite.get('requisitos', []),
        "observaciones": datos_tramite.get('observaciones', []), 
        "pasos": datos_tramite.get('pasos', []), 
        "costo": datos_tramite.get('costo', 'No especificado'),
        "direccion": datos_tramite.get('direccion', 'No disponible'),
        "coordenadas": datos_tramite.get('coordenadas', ''),
        "horarios": datos_tramite.get('horarios', ''),
        "telefono": datos_tramite.get('telefono', ''),
        "email": datos_tramite.get('email', ''),
        "sitio": datos_tramite.get('sitio_oficial', ''), # Corregido: en tu JSON es 'sitio_oficial'
        "responsable": datos_tramite.get('responsable', ''),
        "modalidad": datos_tramite.get('modalidad', ''),
        "mapa_url": datos_tramite.get('mapa_url', ''),
        "formularios": datos_tramite.get('formularios', [])
    }

    consulta_lower = consulta.lower()
    
    # L√≥gica de detecci√≥n de intenci√≥n (ubicaci√≥n, costo, etc.)
    es_consulta_ubicacion = any(k in consulta_lower for k in ["ubicacion", "d√≥nde", "c√≥mo llegar", "direcci√≥n", "lugar", "oficina", "dependencia"])
    es_consulta_costo = any(k in consulta_lower for k in ["costo", "cu√°nto sale", "valor", "precio", "arancel", "pago"])
    es_consulta_formularios = any(k in consulta_lower for k in ["formulario", "formularios", "documento", "descargar", "archivo", "papel", "modelo"])
    es_consulta_requisitos = any(k in consulta_lower for k in ["requisito", "requisitos", "necesito", "qu√© llevar", "qu√© presentar", "documentos"])
    es_consulta_pasos = any(k in consulta_lower for k in ["pasos", "c√≥mo se hace", "procedimiento", "proceso", "realizar"])
    es_consulta_observaciones = any(k in consulta_lower for k in ["observaciones", "observacion", "notas", "detalles adicionales", "importante", "tener en cuenta"])

    if es_consulta_ubicacion:
        if info['direccion'] and info['direccion'] != "No disponible":
            mensaje = f"La ubicaci√≥n para **{info['titulo']}** es:\n- üìç **Direcci√≥n:** {info['direccion']}."
            if info['horarios']:
                mensaje += f"\n- ‚è∞ **Horarios:** {info['horarios']}."
            if info['telefono']:
                mensaje += f"\n- üìû **Tel√©fono:** {info['telefono']}."
            if info['email']:
                mensaje += f"\n- üìß **E-mail:** {info['email']}."
            if info['responsable']:
                mensaje += f"\n- üë§ **Responsable:** {info['responsable']}."
            if info['mapa_url']:
                mensaje += f"\n[Ver en Google Maps]({info['mapa_url']})"
            mensaje += "\n¬øNecesitas saber c√≥mo llegar o alg√∫n otro detalle?"
        else:
            mensaje = f"No pude encontrar la ubicaci√≥n exacta para **{info['titulo']}** en mi base de datos. Te recomiendo contactar al organismo directamente."
    elif es_consulta_costo:
        if info['costo'] != "No especificado":
            if isinstance(info['costo'], list):
                mensaje = f"Los costos para el tr√°mite de **{info['titulo']}** son:\n"
                for c in info['costo']:
                    mensaje += f"- {c.get('descripcion', 'Costo')}: {c.get('valor', 'No especificado')}\n"
            else:
                mensaje = f"El costo para el tr√°mite de **{info['titulo']}** es: **{info['costo']}**."
        else:
            mensaje = f"No se encontr√≥ informaci√≥n espec√≠fica sobre el costo para el tr√°mite de **{info['titulo']}**."
    elif es_consulta_formularios:
        if info['formularios']:
            mensaje = f"Para el tr√°mite de **{info['titulo']}**, puedes descargar los siguientes formularios:\n"
            for form in info['formularios']:
                form_name = form.get('nombre', 'Formulario')
                form_url = form.get('url', '#')
                mensaje += f"- üìÑ [{form_name}]({form_url})\n" 
        else:
            mensaje = f"No se encontraron formularios espec√≠ficos para el tr√°mite de **{info['titulo']}**."
    elif es_consulta_requisitos:
        if info['requisitos']:
            if isinstance(info['requisitos'], list):
                mensaje = f"üìã **Requisitos para el tr√°mite de {info['titulo']}**:\n"
                for i, req in enumerate(info['requisitos'], 1):
                    mensaje += f"{i}. {req}\n"
            else: 
                mensaje = f"üìã **Requisitos para el tr√°mite de {info['titulo']}**: {info['requisitos']}."
        else:
            mensaje = f"No se encontraron requisitos espec√≠ficos para el tr√°mite de **{info['titulo']}**."
    elif es_consulta_observaciones:
        if info['observaciones']:
            if isinstance(info['observaciones'], list): 
                mensaje = f"‚ö†Ô∏è **Observaciones importantes para el tr√°mite de {info['titulo']}**:\n"
                for i, obs in enumerate(info['observaciones'], 1):
                    mensaje += f"{i}. {obs}\n"
            else: 
                mensaje = f"‚ö†Ô∏è **Observaciones importantes para el tr√°mite de {info['titulo']}**: {info['observaciones']}."
        else:
            mensaje = f"No se encontraron observaciones espec√≠ficas para el tr√°mite de **{info['titulo']}**."
    elif es_consulta_pasos:
        if info['pasos']:
            if isinstance(info['pasos'], list): 
                mensaje = f"‚û°Ô∏è **Pasos para realizar el tr√°mite de {info['titulo']}**:\n"
                for i, paso in enumerate(info['pasos'], 1):
                    mensaje += f"{i}. {paso}\n"
            else: 
                mensaje = f"‚û°Ô∏è **Pasos para realizar el tr√°mite de {info['titulo']}**: {info['pasos']}."
        else:
            mensaje = f"No se encontraron pasos detallados para el tr√°mite de **{info['titulo']}**."
    else:
        # Consulta general sobre el tr√°mite
        mensaje = f"Informaci√≥n sobre **{info['titulo']}**:\n"
        if info['descripcion']:
            mensaje += f"{info['descripcion']}\n"

        summary_info = []
        if info['direccion'] != "No disponible":
            summary_info.append(f"üìç Ubicaci√≥n disponible")
        if info['costo'] != "No especificado" and (isinstance(info['costo'], str) and info['costo'].lower() != 'ninguno' or isinstance(info['costo'], list) and info['costo']):
            summary_info.append(f"üí∞ Costo: {info['costo'] if isinstance(info['costo'], str) else 'Ver detalles'}")
        if info['modalidad']:
            summary_info.append(f"üíª Modalidad: {info['modalidad']}")
        if info['formularios']:
            summary_info.append(f"üìÑ Formularios disponibles ({len(info['formularios'])})")

        if summary_info:
            mensaje += "\n" + "\n".join(summary_info) + "\n"

        mensaje += "\n¬øQu√© m√°s te gustar√≠a saber? Por ejemplo: requisitos, pasos, horarios, tel√©fono, email, o si hay formularios."

    return {
        "tipo": "tramite_especifico",
        "categoria": categoria_id,
        "info": info, 
        "mensaje": mensaje,
        "necesita_seleccion": False, 
        "datos_tramite_identificado": info 
    }

def llamar_ia_openrouter(mensaje_usuario, historial):
    """
    **Funci√≥n revisada: Ahora SOLO se usa para consultas NO directamente cubiertas por la l√≥gica RAG + formateo.**
    Llama a la API de OpenRouter con un mensaje general si el RAG no encontr√≥ un tr√°mite espec√≠fico
    o si la intenci√≥n es muy general/conversacional.
    """
    if not OPENROUTER_API_KEY:
        logger.error("OpenRouter API key not configured")
        return {"respuesta": "Error de configuraci√≥n. Por favor, contacta al administrador.", "error": True}

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
    }

    messages = [
        {"role": "system", "content": [{"type": "text", "text": SYSTEM_PROMPT}]},
    ]
    
    historial_formateado = []
    for item in historial or []:
        if isinstance(item, dict):
            if item.get("usuario"):
                historial_formateado.append({"role": "user", "content": [{"type": "text", "text": item["usuario"]}]})
            if item.get("asistente"):
                historial_formateado.append({"role": "assistant", "content": [{"type": "text", "text": item["asistente"]}]})

    if historial_formateado:
        messages.extend(historial_formateado)
    
    messages.append({"role": "user", "content": [{"type": "text", "text": mensaje_usuario}]})

    data = {
        "model": "google/gemini-2.0-flash-exp:free", # Aseg√∫rate de que este es el modelo que quieres usar
        "messages": messages,
        "max_tokens": 1000, 
        "temperature": 0.5
    }

    try:
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            data=json.dumps(data, indent=2, ensure_ascii=False),
            timeout=45
        )
        response.raise_for_status()
        resultado = response.json()
        if 'choices' not in resultado or not resultado['choices']:
            logger.error(f"Unexpected response from OpenRouter: {resultado}")
            return {"respuesta": "No pude generar una respuesta adecuada. ¬øPodr√≠as reformular tu pregunta?", "error": True}

        respuesta_ia = resultado['choices'][0]['message']['content']

        # En este punto, como llamar_ia_openrouter es el fallback, no tenemos un 'info' de tr√°mite espec√≠fico
        # La respuesta estructurada aqu√≠ podr√≠a indicar que no se encontr√≥ un tr√°mite.
        return {"respuesta": respuesta_ia, "datos_estructurados": {"tipo": "respuesta_general_ia"}, "timestamp": datetime.now().isoformat()}

    except requests.RequestException as e:
        logger.error(f"Network or HTTP error when calling OpenRouter: {e}")
        return {"respuesta": "Hubo un problema t√©cnico al conectar con la IA. Intenta de nuevo m√°s tarde.", "error": True}
    except Exception as e:
        logger.error(f"Ocurri√≥ un error inesperado al procesar la respuesta de la IA: {e}", exc_info=True)
        return {"respuesta": "Ocurri√≥ un error inesperado. Por favor, contacta al soporte.", "error": True}